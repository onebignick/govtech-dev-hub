generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL")
}

enum ProductType {
  PRODUCT
  AGENCY
  DEVTOOL
  INNERSOURCE
  PROTOTYPE
}

model User {
  id             String        @id @default(cuid())
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  clerkUserId    String?       @unique
  blogPosts      BlogPost[]
  ideas          Idea[]
  products       Product[]     @relation("ProductToUser")
  upvotedIdeas   Idea[]        @relation("UpvotedIdea")
  downvotedIdeas Idea[]        @relation("DownvotedIdea")
  ideaComments   IdeaComment[]
  contact        Contact[]
}

model Contact {
  id       Int       @id @default(autoincrement())
  name     String
  email    String
  user     User?     @relation(fields: [userID], references: [id])
  userID   String
  products Product[] @relation("ProductContacts")
}

model Image {
  id        String    @id @default(cuid())
  publicId  String    @unique
  format    String
  version   String
  url       String
  secureUrl String
  logoFor   Product?  @relation("ProductLogo")
  coverFor  Product?  @relation("ProductCover")
  blogPost  BlogPost? @relation("BlogCover")
}

model BlogPost {
  id        String   @id
  title     String
  content   String
  authorID  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  cover     Image?   @relation("BlogCover", fields: [coverId], references: [id])
  coverId   String?  @unique
  author    User     @relation(fields: [authorID], references: [id])

  @@index([title])
}

model Runway {
  id    String       @id
  name  String
  steps RunwayStep[]
}

model RunwayStep {
  id          Int     @id @default(autoincrement())
  title       String
  description String
  duration    String?
  timeline    String?
  runwayID    String
  runway      Runway  @relation(fields: [runwayID], references: [id])
}

model Product {
  id            String                @id
  name          String
  type          ProductType
  oneLiner      String
  summary       String
  createdAt     DateTime              @default(now())
  updatedAt     DateTime              @updatedAt
  links         Link[]
  changelogs    Changelog[]
  features      Feature[]
  admins        User[]                @relation("ProductToUser")
  logo          Image                 @relation("ProductLogo", fields: [logoId], references: [id])
  logoId        String                @unique
  cover         Image?                @relation("ProductCover", fields: [coverId], references: [id])
  coverId       String?               @unique
  contacts      Contact[]             @relation("ProductContacts")
  organisations Organisation[]        @relation("OrganisationProduct")
  inCategory    ProductCategoryItem[]

  @@index([name])
}

model Organisation {
  id       String         @id
  name     String
  parentID String?        @unique
  parent   Organisation?  @relation("ParentOrganisation", fields: [parentID], references: [id])
  children Organisation[] @relation("ParentOrganisation")
  products Product[]      @relation("OrganisationProduct")
}

model ProductCategory {
  id          String                @id
  name        String
  description String?
  parentID    String?               @unique
  parent      ProductCategory?      @relation("ParentProductCategory", fields: [parentID], references: [id])
  children    ProductCategory[]     @relation("ParentProductCategory")
  items       ProductCategoryItem[]
}

model ProductCategoryItem {
  id         Int             @id @default(autoincrement())
  label      String
  productId  String
  product    Product         @relation(fields: [productId], references: [id])
  categoryId String
  category   ProductCategory @relation(fields: [categoryId], references: [id])
}

model Link {
  id        Int     @id @default(autoincrement())
  label     String
  url       String
  productId String
  product   Product @relation(fields: [productId], references: [id])
}

model Feature {
  id          Int     @id @default(autoincrement())
  title       String
  description String
  productId   String
  product     Product @relation(fields: [productId], references: [id])
}

model Changelog {
  id        Int      @id @default(autoincrement())
  quarter   String
  changes   String[]
  productId String
  product   Product  @relation(fields: [productId], references: [id])
}

model Idea {
  id        Int           @id @default(autoincrement())
  title     String
  content   String
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  creator   User          @relation(fields: [creatorID], references: [id])
  creatorID String
  upvoted   User[]        @relation("UpvotedIdea")
  downvoted User[]        @relation("DownvotedIdea")
  comments  IdeaComment[]

  @@index([title])
}

model IdeaComment {
  id        Int           @id @default(autoincrement())
  content   String
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  isAnswer  Boolean?
  author    User          @relation(fields: [authorID], references: [id])
  authorID  String
  idea      Idea          @relation(fields: [ideaID], references: [id])
  ideaID    Int
  replyToID Int?          @unique
  replyTo   IdeaComment?  @relation("IdeaComments", fields: [replyToID], references: [id])
  replies   IdeaComment[] @relation("IdeaComments")
}
